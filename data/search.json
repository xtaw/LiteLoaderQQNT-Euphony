{"list":[{"title":"At","link":"<a href=\"At.html\">At</a>","description":"<p>构造一个 <strong>qq号</strong> 为 <code>uin</code>，<strong>uid</strong> 为 <code>uid</code> 的 <strong>@群聊成员</strong> 消息元素。</p>"},{"title":"At#getUid","link":"<a href=\"At.html#getUid\">getUid</a>","description":"<p>返回该消息元素的 <code>#uid</code> 属性。</p>"},{"title":"At#getUin","link":"<a href=\"At.html#getUin\">getUin</a>","description":"<p>返回该消息元素的 <code>#uin</code> 属性。</p>"},{"title":"At#toElement","link":"<a href=\"At.html#toElement\">toElement</a>","description":"<p>构造并返回该消息元素所对应的 <strong>element</strong> 对象。</p>"},{"title":"At.fromUid","link":"<a href=\"At.html#.fromUid\">fromUid</a>","description":"<p>通过 <strong>uid</strong> 来构造一个 <strong>@群聊成员</strong> 元素。</p>\n<p>若不存在，则会返回 <code>null</code>。</p>"},{"title":"At.fromUin","link":"<a href=\"At.html#.fromUin\">fromUin</a>","description":"<p>通过 <strong>qq号</strong> 来构造一个 <strong>@群聊成员</strong> 元素。</p>\n<p>若不存在，则会返回 <code>null</code>。</p>"},{"title":"At.getElementType","link":"<a href=\"At.html#.getElementType\">getElementType</a>","description":"<p>返回该消息元素所对应的 <strong>elementType</strong>，值为 <strong>1</strong>。</p>"},{"title":"AtAll","link":"<a href=\"AtAll.html\">AtAll</a>","description":"<p>构造一个显示为 <code>content</code> 的 <strong>@全体成员</strong> 消息元素。</p>"},{"title":"AtAll#getContent","link":"<a href=\"AtAll.html#getContent\">getContent</a>","description":"<p>返回该消息元素的 <code>#content</code> 属性。</p>"},{"title":"AtAll#toElement","link":"<a href=\"AtAll.html#toElement\">toElement</a>","description":"<p>构造并返回该消息元素所对应的 <strong>element</strong> 对象。</p>"},{"title":"AtAll.getElementType","link":"<a href=\"AtAll.html#.getElementType\">getElementType</a>","description":"<p>返回该消息元素所对应的 <strong>elementType</strong>，值为 <strong>1</strong>。</p>"},{"title":"Audio","link":"<a href=\"Audio.html\">Audio</a>","description":"<p>构造一个路径为 <code>path</code>，显示时长为 <code>duration</code> 的语音消息元素。</p>\n<p>若不传入 <code>duration</code>，则 <code>toElement</code> 函数会尝试自动计算语音时长（可能完全不准确）。</p>"},{"title":"Audio#getDuration","link":"<a href=\"Audio.html#getDuration\">getDuration</a>","description":"<p>返回该消息元素的 <code>#duration</code> 属性。</p>"},{"title":"Audio#getPath","link":"<a href=\"Audio.html#getPath\">getPath</a>","description":"<p>返回该消息元素的 <code>#path</code> 属性。</p>"},{"title":"Audio#toElement","link":"<a href=\"Audio.html#toElement\">toElement</a>","description":"<p>构造并返回该消息元素所对应的 <strong>element</strong> 对象。</p>"},{"title":"Audio.getElementType","link":"<a href=\"Audio.html#.getElementType\">getElementType</a>","description":"<p>返回该消息元素所对应的 <strong>elementType</strong>，值为 <strong>4</strong>。</p>"},{"title":"Cache","link":"<a href=\"Cache.html\">Cache</a>"},{"title":"Cache.withCache","link":"<a href=\"Cache.html#.withCache\">withCache</a>","description":"<p>将 <code>defaultSupplier</code> 返回的数据以 <code>key</code> 为键缓存，并返回数据。</p>"},{"title":"Cache.withCacheAsync","link":"<a href=\"Cache.html#.withCacheAsync\">withCacheAsync</a>","description":"<p>将 <code>defaultSupplier</code> 返回的数据以 <code>key</code> 为键缓存，并返回数据。</p>"},{"title":"ChatFuncBar","link":"<a href=\"ChatFuncBar.html\">ChatFuncBar</a>"},{"title":"ChatFuncBar.addLeftButton","link":"<a href=\"ChatFuncBar.html#.addLeftButton\">addLeftButton</a>","description":"<p>向聊天窗口输入框上方工具栏左侧添加一个按钮。</p>"},{"title":"ChatFuncBar.addRightButton","link":"<a href=\"ChatFuncBar.html#.addRightButton\">addRightButton</a>","description":"<p>向聊天窗口输入框上方工具栏右侧添加一个按钮。</p>"},{"title":"Client","link":"<a href=\"Client.html\">Client</a>"},{"title":"Client.drawLuckyCard","link":"<a href=\"Client.html#.drawLuckyCard\">drawLuckyCard</a>","description":"<p>抽取幸运字符。</p>\n<p>若抽取失败，则返回错误信息。</p>"},{"title":"Client.getClientKey","link":"<a href=\"Client.html#.getClientKey\">getClientKey</a>","description":"<p>获取客户端登录账号的 clientKey。</p>\n<p>若获取失败，则返回错误信息。</p>"},{"title":"Client.getFriends","link":"<a href=\"Client.html#.getFriends\">getFriends</a>","description":"<p>获取客户端好友列表。</p>"},{"title":"Client.getGroups","link":"<a href=\"Client.html#.getGroups\">getGroups</a>","description":"<p>获取客户端群列表。</p>"},{"title":"Client.getPskey","link":"<a href=\"Client.html#.getPskey\">getPskey</a>","description":"<p>获取特定作用域的客户端登录账号的 pskey。</p>\n<p>若获取失败，则返回错误信息。</p>"},{"title":"Client.getUid","link":"<a href=\"Client.html#.getUid\">getUid</a>","description":"<p>获取客户端登录账号的 <strong>uid</strong>。</p>"},{"title":"Client.getUin","link":"<a href=\"Client.html#.getUin\">getUin</a>","description":"<p>获取客户端登录账号的 <strong>qq号</strong>。</p>"},{"title":"Client.isSvip","link":"<a href=\"Client.html#.isSvip\">isSvip</a>","description":"<p>获取自身是否为 qq 超级会员。</p>"},{"title":"Client.isVip","link":"<a href=\"Client.html#.isVip\">isVip</a>","description":"<p>获取自身是否为 qq 会员。</p>"},{"title":"Client.isYearVip","link":"<a href=\"Client.html#.isYearVip\">isYearVip</a>","description":"<p>获取自身是否为 qq 年会员。</p>"},{"title":"Contact","link":"<a href=\"Contact.html\">Contact</a>","description":"<p>仅供子类调用。</p>"},{"title":"Contact#getId","link":"<a href=\"Contact.html#getId\">getId</a>","description":"<p>返回该联系人的 <code>#id</code> 属性。</p>"},{"title":"Contact#sendMessage","link":"<a href=\"Contact.html#sendMessage\">sendMessage</a>","description":"<p>向该联系人发送一条消息，并返回其在服务器上的来源。</p>"},{"title":"Contact#toPeer","link":"<a href=\"Contact.html#toPeer\">toPeer</a>","description":"<p>（抽象函数，由子类实现）</p>\n<p>构造并返回该联系人所对应的 <strong>peer</strong> 对象。</p>"},{"title":"Contact.getChatType","link":"<a href=\"Contact.html#.getChatType\">getChatType</a>","description":"<p>（抽象函数，由子类实现）</p>\n<p>返回该联系人类型所对应的 <strong>chatType</strong>。</p>"},{"title":"Contact.getCurrentContact","link":"<a href=\"Contact.html#.getCurrentContact\">getCurrentContact</a>","description":"<p>返回当前窗口上正在进行的聊天对象。如果没有聊天对象，或聊天对象类型不受支持，则返回 <code>null</code>。</p>"},{"title":"EventChannel","link":"<a href=\"EventChannel.html\">EventChannel</a>"},{"title":"EventChannel#call","link":"<a href=\"EventChannel.html#call\">call</a>","description":"<p>触发事件 <code>eventName</code> 并传入参数 <code>args</code>。</p>"},{"title":"EventChannel#subscribeEvent","link":"<a href=\"EventChannel.html#subscribeEvent\">subscribeEvent</a>","description":"<p>为事件 <code>eventName</code> 添加一个 <code>handler</code> 处理器。</p>"},{"title":"EventChannel#unsubscribeEvent","link":"<a href=\"EventChannel.html#unsubscribeEvent\">unsubscribeEvent</a>","description":"<p>移除事件 <code>eventName</code> 的 <code>handler</code> 处理器。</p>"},{"title":"EventChannel.withTriggers","link":"<a href=\"EventChannel.html#.withTriggers\">withTriggers</a>","description":"<p>构造并返回一个带有封装事件触发器的事件通道。</p>"},{"title":"Friend","link":"<a href=\"Friend.html\">Friend</a>","description":"<p>构造一个 <strong>qq号</strong> 为 <code>uin</code>，<strong>uid</strong> 为 <code>uid</code> 的好友。</p>\n<p>注意：在任何情况下，都不应该直接使用该构造器来构造好友。相反地，你应该使用 <code>Friend.make(uin, uid)</code> 函数来构造好友。</p>"},{"title":"Friend#getBio","link":"<a href=\"Friend.html#getBio\">getBio</a>","description":"<p>获取并返回该好友的个性签名。</p>"},{"title":"Friend#getBirthday","link":"<a href=\"Friend.html#getBirthday\">getBirthday</a>","description":"<p>获取并返回该好友的生日。</p>"},{"title":"Friend#getNative","link":"<a href=\"Friend.html#getNative\">getNative</a>","description":"<p>获取并返回该好友在原生qq中的对象。</p>"},{"title":"Friend#getNick","link":"<a href=\"Friend.html#getNick\">getNick</a>","description":"<p>获取并返回该好友的昵称。</p>"},{"title":"Friend#getQid","link":"<a href=\"Friend.html#getQid\">getQid</a>","description":"<p>获取并返回该好友的 <strong>qid</strong>。</p>"},{"title":"Friend#getRemark","link":"<a href=\"Friend.html#getRemark\">getRemark</a>","description":"<p>获取并返回该好友的好友备注。</p>"},{"title":"Friend#getUid","link":"<a href=\"Friend.html#getUid\">getUid</a>","description":"<p>返回该好友的 <code>#uid</code> 属性。</p>"},{"title":"Friend#toPeer","link":"<a href=\"Friend.html#toPeer\">toPeer</a>","description":"<p>构造并返回该好友所对应的 <strong>peer</strong> 对象。</p>"},{"title":"Friend.fromUid","link":"<a href=\"Friend.html#.fromUid\">fromUid</a>","description":"<p>通过 <strong>uid</strong> 来获取一个好友。</p>\n<p>若不存在，则会返回 <code>null</code>。</p>"},{"title":"Friend.fromUin","link":"<a href=\"Friend.html#.fromUin\">fromUin</a>","description":"<p>通过 <strong>qq号</strong> 来获取一个好友。</p>\n<p>若不存在，则会返回 <code>null</code>。</p>"},{"title":"Friend.getChatType","link":"<a href=\"Friend.html#.getChatType\">getChatType</a>","description":"<p>返回该联系人类型所对应的 <strong>chatType</strong>，值为 <strong>1</strong>。</p>"},{"title":"Friend.make","link":"<a href=\"Friend.html#.make\">make</a>","description":"<p>构造一个 <strong>qq号</strong> 为 <code>uin</code>，<strong>uid</strong> 为 <code>uid</code> 的好友。</p>\n<p>该函数构造出的好友全局只有一个实例，相同的 <code>uin</code> 和 <code>uid</code> 将会返回相同的对象。</p>\n<p>在任何情况下，都应该使用该函数来构造好友，而非直接使用构造器。</p>"},{"title":"Group","link":"<a href=\"Group.html\">Group</a>","description":"<p>构造一个 <strong>群号</strong> 为 <code>id</code> 的群聊。</p>\n<p>注意：在任何情况下，都不应该直接使用该构造器来构造群聊。相反地，你应该使用 <code>Group.make(id)</code> 函数来构造群聊。</p>"},{"title":"Group#getMaxMemberCount","link":"<a href=\"Group.html#getMaxMemberCount\">getMaxMemberCount</a>","description":"<p>获取并返回该群聊的群聊最大人数。</p>"},{"title":"Group#getMemberCount","link":"<a href=\"Group.html#getMemberCount\">getMemberCount</a>","description":"<p>获取并返回该群聊的群聊人数。</p>"},{"title":"Group#getMemberFromUid","link":"<a href=\"Group.html#getMemberFromUid\">getMemberFromUid</a>","description":"<p>通过 <strong>uid</strong> 获取该群聊的某个成员。</p>\n<p>若不存在，则会返回 <code>null</code>。</p>"},{"title":"Group#getMemberFromUin","link":"<a href=\"Group.html#getMemberFromUin\">getMemberFromUin</a>","description":"<p>通过 <strong>qq号</strong> 获取该群聊的某个成员。</p>\n<p>若不存在，则会返回 <code>null</code>。</p>"},{"title":"Group#getMembers","link":"<a href=\"Group.html#getMembers\">getMembers</a>","description":"<p>获取该群聊的所有成员。</p>"},{"title":"Group#getName","link":"<a href=\"Group.html#getName\">getName</a>","description":"<p>获取并返回该群聊的群聊名称。</p>"},{"title":"Group#getNative","link":"<a href=\"Group.html#getNative\">getNative</a>","description":"<p>获取并返回该群聊在原生qq中的对象。</p>"},{"title":"Group#getRemark","link":"<a href=\"Group.html#getRemark\">getRemark</a>","description":"<p>获取并返回该群聊的群聊备注。</p>"},{"title":"Group#toPeer","link":"<a href=\"Group.html#toPeer\">toPeer</a>","description":"<p>构造并返回该群聊所对应的 <strong>peer</strong> 对象。</p>"},{"title":"Group.getChatType","link":"<a href=\"Group.html#.getChatType\">getChatType</a>","description":"<p>返回该联系人类型所对应的 <strong>chatType</strong>，值为 <strong>2</strong>。</p>"},{"title":"Group.make","link":"<a href=\"Group.html#.make\">make</a>","description":"<p>构造一个 <strong>群号</strong> 为 <code>id</code> 的群聊。</p>\n<p>该函数构造出的群聊全局只有一个实例，相同的 <code>id</code> 将会返回相同的对象。</p>\n<p>在任何情况下，都应该使用该函数来构造群聊，而非直接使用构造器。</p>"},{"title":"Image","link":"<a href=\"Image.html\">Image</a>","description":"<p>构造一个路径为 <code>path</code> 的图片消息元素。</p>"},{"title":"Image#getPath","link":"<a href=\"Image.html#getPath\">getPath</a>","description":"<p>返回该消息元素的 <code>#path</code> 属性。</p>"},{"title":"Image#toElement","link":"<a href=\"Image.html#toElement\">toElement</a>","description":"<p>构造并返回该消息元素所对应的 <strong>element</strong> 对象。</p>"},{"title":"Image.getElementType","link":"<a href=\"Image.html#.getElementType\">getElementType</a>","description":"<p>返回该消息元素所对应的 <strong>elementType</strong>，值为 <strong>2</strong>。</p>"},{"title":"Member","link":"<a href=\"Member.html\">Member</a>","description":"<p>构造一个来自 <code>group</code> 的 <strong>qq号</strong> 为 <code>uin</code>，<strong>uid</strong> 为 <code>uid</code> 的群聊成员。</p>\n<p>注意：在任何情况下，都不应该直接使用该构造器来构造群聊成员。相反地，你应该使用 <code>Member.make(group, uin, uid)</code> 函数来构造群聊成员。</p>"},{"title":"Member#getCardName","link":"<a href=\"Member.html#getCardName\">getCardName</a>","description":"<p>返回该群聊成员的 <code>#cardName</code> 属性。</p>"},{"title":"Member#getGroup","link":"<a href=\"Member.html#getGroup\">getGroup</a>","description":"<p>返回该群聊成员的 <code>#group</code> 属性。</p>"},{"title":"Member#getNick","link":"<a href=\"Member.html#getNick\">getNick</a>","description":"<p>返回该群聊成员的 <code>#nick</code> 属性。</p>"},{"title":"Member#getQid","link":"<a href=\"Member.html#getQid\">getQid</a>","description":"<p>返回该群聊成员的 <code>#qid</code> 属性。</p>"},{"title":"Member#getRemark","link":"<a href=\"Member.html#getRemark\">getRemark</a>","description":"<p>返回该群聊成员的 <code>#remark</code> 属性。</p>"},{"title":"Member#getUid","link":"<a href=\"Member.html#getUid\">getUid</a>","description":"<p>返回该群聊成员的 <code>#uid</code> 属性。</p>"},{"title":"Member#mute","link":"<a href=\"Member.html#mute\">mute</a>","description":"<p>设置该群聊成员的禁言时长为 <code>duration</code>。</p>\n<p>若 <code>duration</code> 为 0，则会解除该群聊成员的禁言。</p>\n<p>实际上，该函数可以做到只禁言 <strong>1s</strong>，尽管在某些设备上无法显示 <strong>1s</strong> 的时长。</p>"},{"title":"Member#setCardName","link":"<a href=\"Member.html#setCardName\">setCardName</a>","description":"<p>设置该群聊成员的群名片为 <code>cardName</code>。</p>"},{"title":"Member#toPeer","link":"<a href=\"Member.html#toPeer\">toPeer</a>","description":"<p>构造并返回该群聊成员所对应的 <strong>peer</strong> 对象。</p>"},{"title":"Member#unmute","link":"<a href=\"Member.html#unmute\">unmute</a>","description":"<p>解除该群聊成员的禁言。效果等价于 <code>Member.mute(0)</code>。</p>"},{"title":"Member.getChatType","link":"<a href=\"Member.html#.getChatType\">getChatType</a>","description":"<p>返回该联系人类型所对应的 <strong>chatType</strong>，值为 <strong>1</strong>。</p>"},{"title":"Member.make","link":"<a href=\"Member.html#.make\">make</a>","description":"<p>构造一个来自 <code>group</code> 的 <strong>qq号</strong> 为 <code>uin</code>，<strong>uid</strong> 为 <code>uid</code> 的群聊成员。</p>\n<p>该函数构造出的群聊成员全局只有一个实例，相同的 <code>group</code> <code>uin</code> <code>uid</code> 将会返回相同的对象。</p>\n<p>在一般情况下，你应该使用 <code>Group.getMemberFromUin(uin)</code> 或 <code>Group.getMemberFromUid(uid)</code> 函数来获取一个群聊成员，而不是直接构造。</p>\n<p>若有特殊需要，则应该使用该函数来构造群聊成员，而非直接使用构造器。</p>"},{"title":"MessageChain","link":"<a href=\"MessageChain.html\">MessageChain</a>"},{"title":"MessageChain#append","link":"<a href=\"MessageChain.html#append\">append</a>","description":"<p>将一个消息元素添加至该消息链中。</p>"},{"title":"MessageChain#contentToString","link":"<a href=\"MessageChain.html#contentToString\">contentToString</a>","description":"<p>将该消息链转化为与qq原生显示一致的字符串形式。</p>\n<p>例如：</p>\n<p><code>Image</code> 将会被视为 &quot;[图片]&quot;。</p>\n<p><code>Audio</code> 将会被视为 &quot;[语音]&quot;。</p>\n<p>但由于 <code>At</code> 类型不包括群信息，目前 <code>At</code> 只会被视为 &quot;<strong>@qq号</strong>&quot; 的形式。</p>"},{"title":"MessageChain#get","link":"<a href=\"MessageChain.html#get\">get</a>","description":"<p>获取该消息链中指定位置的消息元素。</p>"},{"title":"MessageChain#pop","link":"<a href=\"MessageChain.html#pop\">pop</a>","description":"<p>移除该消息链中最后一个消息元素。</p>"},{"title":"MessageChain#remove","link":"<a href=\"MessageChain.html#remove\">remove</a>","description":"<p>移除该消息链中指定位置的消息元素。</p>"},{"title":"MessageChain#toElements","link":"<a href=\"MessageChain.html#toElements\">toElements</a>","description":"<p>构造并返回该消息链所对应的 <strong>elements</strong> 对象。</p>"},{"title":"MessageChain.fromNative","link":"<a href=\"MessageChain.html#.fromNative\">fromNative</a>","description":"<p>从原生消息链构造出一个 <code>MessageChain</code> 对象。</p>"},{"title":"MessageSource","link":"<a href=\"MessageSource.html\">MessageSource</a>","description":"<p>通过 <strong>msgId</strong> 和联系人构造一个消息来源。</p>"},{"title":"MessageSource#getContact","link":"<a href=\"MessageSource.html#getContact\">getContact</a>","description":"<p>返回该消息来源的 <code>#contact</code> 属性。</p>"},{"title":"MessageSource#getMsgId","link":"<a href=\"MessageSource.html#getMsgId\">getMsgId</a>","description":"<p>返回该消息来源的 <code>#msgId</code> 属性。</p>"},{"title":"MessageSource#recall","link":"<a href=\"MessageSource.html#recall\">recall</a>","description":"<p>撤回该消息来源所代表的消息。</p>"},{"title":"PlainText","link":"<a href=\"PlainText.html\">PlainText</a>","description":"<p>构造一个内容为 <code>content</code> 的纯文本消息。</p>"},{"title":"PlainText#getContent","link":"<a href=\"PlainText.html#getContent\">getContent</a>","description":"<p>返回该消息元素的 <code>#content</code> 属性。</p>"},{"title":"PlainText#toElement","link":"<a href=\"PlainText.html#toElement\">toElement</a>","description":"<p>构造并返回该消息元素所对应的 <strong>element</strong> 对象。</p>"},{"title":"PlainText.getElementType","link":"<a href=\"PlainText.html#.getElementType\">getElementType</a>","description":"<p>返回该消息元素所对应的 <strong>elementType</strong>，值为 <strong>1</strong>。</p>"},{"title":"Raw","link":"<a href=\"Raw.html\">Raw</a>","description":"<p>构造一个代表 <code>element</code> 的原生消息元素。</p>"},{"title":"Raw#getElement","link":"<a href=\"Raw.html#getElement\">getElement</a>","description":"<p>返回该消息元素的 <code>#element</code> 属性。</p>"},{"title":"Raw#toElement","link":"<a href=\"Raw.html#toElement\">toElement</a>","description":"<p>返回该消息元素所对应的 <strong>element</strong> 对象。</p>"},{"title":"SingleMessage","link":"<a href=\"SingleMessage.html\">SingleMessage</a>"},{"title":"SingleMessage#toElement","link":"<a href=\"SingleMessage.html#toElement\">toElement</a>","description":"<p>（抽象函数，由子类实现）</p>\n<p>构造并返回该消息元素所对应的 <strong>element</strong> 对象。</p>"},{"title":"SingleMessage.fromNative","link":"<a href=\"SingleMessage.html#.fromNative\">fromNative</a>","description":"<p>从原生消息元素构造出一个 <code>SingleMessage</code> 对象。</p>"},{"title":"SingleMessage.getElementType","link":"<a href=\"SingleMessage.html#.getElementType\">getElementType</a>","description":"<p>（抽象函数，由子类实现）</p>\n<p>返回该消息元素所对应的 <strong>elementType</strong>。</p>\n<p>特别地， <code>Raw</code> 类型并不含有该静态函数。</p>"},{"title":"convertUidToUin","link":"<a href=\"global.html#convertUidToUin\">convertUidToUin</a>","description":"<p>获取 <code>uid</code> 代表的 <strong>qq号</strong>。</p>"},{"title":"convertUinToUid","link":"<a href=\"global.html#convertUinToUid\">convertUinToUid</a>","description":"<p>获取 <code>uin</code> 代表的 <strong>uid</strong>。</p>"},{"title":"invokeNative","link":"<a href=\"global.html#invokeNative\">invokeNative</a>","description":"<p>调用一个qq底层函数，并返回函数返回值。</p>"},{"title":"subscribeEvent","link":"<a href=\"global.html#subscribeEvent\">subscribeEvent</a>","description":"<p>为qq底层事件 <code>cmdName</code> 添加 <code>handler</code> 处理器。</p>"},{"title":"unsubscribeEvent","link":"<a href=\"global.html#unsubscribeEvent\">unsubscribeEvent</a>","description":"<p>移除qq底层事件的 <code>handler</code> 处理器。</p>\n<p>请注意，<code>handler</code> 并不是传入 <code>subscribeEvent</code> 的处理器，而是其返回的新处理器。</p>"}]}